Ci sono due modi differenti di eseguire differenti parti di codice 'apparentemente' contemporaneamente: le Fibre.
Queste permettono di sospendere l'esecuzione di un processo in un punto e farlo ripartire in un altro.

Le due modalità sono:
* creare dei task da far eseguire allo stesso processo.
* creare dei task da far eseguire a più processi.

------------------------------------------------------------------------------------------------------------------------

FIBRE
Permettono di scrivere del codice che usa i thread senza incappare nella complessità ad essi inerente.
Solitamete vengono usate per generare infinite sequenze di valori su domanda. (un'alternativa ai lazy enumerator)

Esempio: i numeri divisibili per due e non per tre.
Alla fibra devon passare un blocco, ma tutte le volte che arriva a Fiber.yield torna il valore e non continua nell'esecuzione.
Ma il blocco viene eseguito quando poi viene chiamato il resume.
numbers = Fiber.new do
    n = 2
    loop do
        Fiber.yield(n) if n % 3 != 0
        n += 2
    end
end
10.times{p numbers.resume}

La fibra può essere usata solo nel thread che l'ha creata, tuttavia ci sono librerie che permettono di estendere questa
limitazione. Le librerie sono:
* fiber 
* continuation

------------------------------------------------------------------------------------------------------------------------

MULTITHREADING

Prima di Ruby 1.9 il concetto di thread era il green thred, cioè una tipologia di threading che non riguardava il SO
ma era gestita da Ruby che passava l'esecuzione un po' a una parte di codice un po' ad un'altra.

Da Ruby 1.9 il multithreading è a livello di sistema operativo ed effettivamente sfruttando le capacità dell'SO si
possono avere più processi paralleli.
Tuttavia il vantaggio è minimo, infatti la maggior parte delle librerie che usa ruby non sono thread safe, in quanto
scritte per il vecchio modello di threading.
Il compromesso è: usare il threading del SO, ma operare con un singolo thread alla volta... quindi non si vedranno mai
due thread nella stessa applicazione che eseguiranno codice veramente contemporaneamente.

Esempio
threads = pages.map do |page|
  Thread.new(page) do |url|
    http = Net::HTTP.new(url, 80)
    print "Fetching #{url}\n"
    print "Got #{http.get('/').message}\n"
  end
end
threads.each{|thred| thread.join }

OSS:
Thread.new(page) do |url|
Notare che passiamo il parametro page e poi nel blocco questo viene passato come url.
I thread condividono le variabili globali, di istanza, e locali che esistono nel momento in cui parte il thred. Quindi
il parametro page che viene fornito dal ciclo può cambiare e il thred che era partito precedentemente può fare casino se
stava usando quella variabile.
Mentre le variabili del blocco passato al thread sono veramente locali al thread.
Si possono passare tutte le variabili che si vogliono al blocco via Thread.new.
OSS:
All'interno del blocco non è bene usare puts perché splitta la scrittura in due, la linea e la newline... questo al
thread non piace e quindi è meglio usare print.

Quando un programma ruby termina, tutti i thread vengono uccisi indipendentemente dal loro stato. Tuttavia si può
aspettare che i vari thread abbiano finito con la chiamata al metodo join.
Però i thread non è che partono quando chiamo la join. La join è solo per dire che se ci sono quei thread che stanno
girando di non uscire dal programma finché non hanno finito di girare.

------------------------------------------------------------------------------------------------------------------------

VARIABILI
Le variabili locali al blocco non sono condivisibili con gli altri thread. Ma se mi serve una variabile visibile al di
fuori come faccio?
La classe Thread permette di creare e accedere a una variabile per nome.
Thread.current[:my_var] = 'ciao'

------------------------------------------------------------------------------------------------------------------------

ECCEZIONI
Le eccezioni si possono gestire in dipendenza dal flag abort_on_exception

abort_on_exception = flase
Un'eccezione in un thread uccide solo quel thred.

abort_on_exception = true
Un'eccezione in un thread uccide quel thread e il main thread.

------------------------------------------------------------------------------------------------------------------------

CONTROLLARE LA SCHEDULAZIONE
Ci sono molti metodi per controllare la schedulazione dei thread, ma la vera cosa da fare è lasciare che ruby e il SO
si occupi di questo!
Gli unici metodi che vale la pena di prendere in considerazione sone: Thread.join e Thread.value.

------------------------------------------------------------------------------------------------------------------------

ESCLUSIONE RECIPROCA
Se più thread hanno accesso alla stessa variabile e la cambiano in maniera incontrollata ci possono essere dei
malfunzionamenti.

Si possono usare i Mutex per creare la sincronizzazione, cioè delle aree di codice dove un solo thread alla volta ha
accesso.
ES:
mutex.lock
... codice ...
mutex.unlock

Tuttavia c'è un modo migliore per farlo che ci mette anche al riparo da eventuali accezioni, nel senso che se viene
sollevata un'eccezione il metodo synchronize toglie il lock dalla risorsa in automatico.
ES:
mutex.synchronize do
...codice...
end

Atri metodi utili:
Mutex.try_lock -> prende il lock se non c'è, altrimenti torna false.
Mutex.sleep -> se ho il lock ma lo voglio momentaneamente lasciare.

Quando devo gestire tutte queste sincronizzazioni c'è un'altra classe che può essere molto  utile: Queue.
Più thread possono aggiungere e togliere oggetti dalla queue con operazioni che sono garantite thread-safe.

------------------------------------------------------------------------------------------------------------------------
LANCIARE PIU' PROCESSI
Un metodo è lanciare più comandi e aspettare che finiscano, con `` o system.
Questi due lanciano un comando in un sottoprocesso.

System torna
true  -> se il comando è stato eseguito con successo
exp   -> se il comando non è stato trovato
false -> se è stato eseguito ma ha tornato errore. L'exit code lo troviamo in $?.

System scrive l'output sulla console del programma, mentre `` non lo fanno.



















