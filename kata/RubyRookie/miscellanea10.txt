Quando lancio un'eccezione posso usare una di quelle già predefinite in Ruby (146) oppure ne posso creare
io una nuova ma deve derivare da StandardError o uno dei suoi figli, altrimenti non viene agganciata per default.

OSS
open-uri permette di scaricare pagine web e salvarle in un file



Gestione eccezioni costrutto
begin
    ...
    ...
rescue Exception
    ...
    # un riferimento all'eccezione presa è contenuta nella variabile globale $!
    raise # se la voglio rilanciare, altrimenti non metto niente. di fatto lui rilancia la $!
    retry # se volgio (o posso) correggere il motivo di eccezione e riprovare ad eseguire il blocco begin ..end. Da usare con molta cautela, perché potrei entrarein cicli infiniti!
else
    ...
    viene eseguita solo se non ci sono state eccezioni e prima del blocco ensure
    ...
ensure
    ... #operazioni finali. viene sempre eseguito
    ...
end

un'alternativa ad usare $! e definire la variabile locale che contiene l'eccezione corrente
begin
    ...
rescue Exception => boom
    ...
end


ci possono essere più rescue per gestire le eccezioni
begin
    ...
rescue StandardError, NameError => boom
    ...
rescue SecurityError => security
    ...
end
ma come fa a capire il match?   usa (parameter === $!)    (=== come quello che usa il case e $! è l'eccezione che è stata lanciata)



OSS
se scrivo rescue senza specificare niente il default è lo StandardError
se nessuna rescue va a buon fine o se l'accezione è lanciata al di fuore del blocco begin .. end cerca ruby un gestore di eccezione nel chiamante e nel chiamante del chiamante e così via...



----
errori di sistema (system error)
vengono lanciate quando un errore di sistema ritorna un codice di errore (error code). (EAGAIN, ...) con 'man errno' su linux li posso vedere
ruby li decora con uno specifico oggetto e ce li mostra


----------------------


NB
i beginner di solito mettono l'apertura del file File.open dentro il blocco begin. E' sbagliato perchè open può lanciare un'eccezione
e se è così di solito non si vuole eseguire ciò che sta nel blocco ensure perchè non c'è nessun file da chiudere.

SBAGLIATO
begin
 file.open
rescue
...

GIUSTO
file.open
begin
...
rescue


------------------------

per lanciare un'eccezione nel codice posso usare (sono la stessa cosa, ma fail è più parlante di raise)
raise
fail (che è un sinonimo una RuntimeError)
#raise -> RuntimeError (o quella corrente)
#raise 'mp3' -> RuntimeError con messaggio
#raise NameError, 'mp3'  -> NameError con messaggio mp3
#raise NameError, 'mp3', caller -> lo stacktrace è prodotto usando Object#caller method




