* Il primo modo per gestire gli I/O è una semplice interfaccia che permette di avere i metodi print, gets, puts, ...
e che permette di gestire semplicemente gli input dell'utente.
* Il secondo modo è usare l'oggetto IO.

------------------------------------------------------------------------------------------------------------------------

OGGETTO IO
C'è una singola classe base per gestire gli input/output, la IO. E' un canale bidirezionale tra il programma ruby e
l'esterno. Ha come figli le classi File e BasicSocket.

------------------------------------------------------------------------------------------------------------------------

FILE (aprire e chiudere)
Modalità corretta di gestire un file:

* creazione
File.new(name, mode, permission) mode, permission non sono obbligatori.
Una volta aperto siamo noi responsabili di chiuderlo in modo che tutto sia scritto e le risorse rilasciate.

* apertura
File.open(name) apre un file. Però se gli associo un blocco, la open passa il file al blocco e si preoccupa lei della
chiusura. Questo ha il vantaggio che se viene generata un'eccezione nel blocco il file viene chiuso prima che l'eccezione
venga propagata.

FILE (leggere e scrivere)
gets      legge una riga da standard input o da qualsiasi file specificato da command line.
file.gets legge una riga da un oggetto file.

------------------------------------------------------------------------------------------------------------------------

LETTURA

Ci sono vari modi di leggere un file, quello classico è tramite i loop while. Un altro modo è sfruttare gli iteratori.
Esempi di teratori: each_byte, each_line.

Un iteratore molto utile è foreach                     --> IO.foreach('my-file.txt') {|line| p line}   # File.foreach
Posso anche ritornare un file intero in una stringa    --> IO.read('my-file.txt')                      # File.read
Posso anche ritornare un file intero in una arry       --> IO.readline('my-file.txt')                  # File.readline

------------------------------------------------------------------------------------------------------------------------

SCRITTURA
Quando scrivo devo ricordarmi la modalità 'w'. ES: File.open('my-file-2.txt', 'w')
Se voglio scrivere dei dati binari e fare in modo che Ruby non pasticci con essi è bene usare IO.print.

Il metodo << si può usare con qualsiasi stream, non solo sulle stringhe e gli array. Inoltre << usa il metodo to_s
per convertire l'argomento in stringa prima di aggiungerlo allo stream.
Es: STDOUT << 99 << " red balloons "

------------------------------------------------------------------------------------------------------------------------



