NUMERI
La classe base di tutti i numeri è Numeric.

INTERI (Fixnum, Bignum) (N,I)
* Come classe base hanno Integer; Integer è la classe base solo per queste due.
* Possono avere qualsiasi lunghezza.
* Vengono convertiti in automatico da Ruby in oggetti Fixnum o Bignum a seconda della dimensione.
* Posso mettere davanti un carattere che ne indica la base in cui devono essere interpretati:
** 0 = ottale, 0d = decimale = default, 0x = esadecimale, 0b = binario.
* Gli underscore vengono ignorati e servono solo per leggere meglio il numero: 123_000.
* Es: per convertire una stringa in un intero posso fare: Integer('9')

REALI (Float) (R)
* basta mettere un punto (.0) per trasformare un Fixnum in un Float, con il punto Ruby capisce che deve fare la conversione
* Vengono memorizzati in un oggetto Float (sia se espressi con virgola mobile, sia quando espressi con esponente)
** sia numeri con virgola mobile, es: 1.2 -> Float
** sia numeri con esponente, es: 5e0 = 5.0 * 10^0 = 5.0 * 1 = 5.0; 5e2 = 5.0 * 10^2 = 5.0 * 100 = 500.0 -> Float

RAZIONALI (Rational) (Q)
* esprime il rapporto tra due numeri interi, sono delle frazioni.
* Dunque rispetto ai float hanno una rappresentazione "esatta".
** Es: Rational(3, 4) oppure Rational('3/4')

COMPLESSI (Complex) (C)
* viene rappresentato come parte reale e parte immaginaria:
** Complex(1,1) = 1+1i

------------------------------------------------------------------------------------------------------------------------

Quando effettuo un'operazione tra due numeri di classi diverse, il risultato appartiene alla classe più generale delle due.
Attenzione alla divisione, se divido due interi il risultato è ancora un intero, così
1   / 2 = 0 (int / int = int)
1.0 / 2 = 0.5 (float / int = float)

Se vogliamo fare le cose più pulite, cioè vogliamo lavorare con i razionali fino alla fine, invece di usare i
risultati in virgola mobile equivalenti possiamo sfruttare la libreria mathn.
La libreria mathn cerca la migliore rappresentazione del numero in questione.
Senza mathn
* 22 / 7 -> Fixnum 3;
* i * i -> Complex -1+0i
Con mathn
* 22 / 7 -> Rational 22/7;
* i * i -> Fixnum -1

------------------------------------------------------------------------------------------------------------------------

Gli Integer supportano molti iteratori: times, upto, downto, step (si può usare nei cicli profiquamente), ...
ES 3.times{print 'x', ' '}
Se non viene specificato il blocco torna un enumeratore, e dato che poi ho un enumeratore ci posso fare ulteriori operazioni
ES 10.downto(7).with_index{|num, idx| p "#{idx}: #{num}"}

------------------------------------------------------------------------------------------------------------------------

STRINGHE
* una stringa è una sequenza di caratteri tra due delimitatori.
** caratteri stampabili
** dati binari (sono difficoltosi da rappresentare e quindi usiamo gli escape; questo permette in 'compilazione' di capire il carattere corretto)

* Delimitatore '
** carattere di escape = \
* si possono escapare solo questi due caratteri: \, '
** '\\' -> \
** '\'' -> '

* Delimitatore "
** carattere di escape = \
* si possono escapare molti caratteri: \n = newline, \r = return, ...
* esegue codice ruby operativo "#{code}".

* Delimitatore here-documents
a = <<ABC
...
ABC
b = <<-ABC
...
       ABC
* << il delimitatore finale deve partire da colonna 1 del file. Esempio a
* <<- il delimitatore finale lo posso spostare dove voglio. Esempio b.

------------------------------------------------------------------------------------------------------------------------

ENCODING
Ogni stringa ha associato un encoding che dipende dal file che contiene la stringa. Di default:
* In Ruby 1.9 è US-ASCII
* In Ruby 2   è UTF-8
* OSS:
#{s} stampa la stringa e basta.
#{s.inspect} stampa la stringa virgolettata.
#{s.encoding} stampa l'encoding della stringa.
Se metto:
* # encoding: us-ascii in cima al file, la stringa s all'interno del file ha encoding US-ASCII
* # encoding: utf-8 in cima al file, la stringa s all'interno del file ha encoding UTF-8 (default)

------------------------------------------------------------------------------------------------------------------------

CARATTERI
* non c'è una classe per i caratteri, sono semplicemente stringhe di lunghezza uno.
* possono essere creati mettendo un ? davanti al carattere o alla sequenza che rappresenta il carattere
* es: ?a
* chissenefrega... usiamo 'a' al posto di ?a che è più chiaro!

------------------------------------------------------------------------------------------------------------------------

LAVORARE CON LE STRINGHE

* posso definire una classe song al volo: song = Struct.new(:title, :name, :length)
** è meno versatile di OpenStruct, ma approfondiamo dopo.

* le assegnazioni multilinea sono utili per esempio per rendere chiara la sintassi di una riga di un file:
* entrambe le regex tornano un array e l'assegnazione viene fatta in automatico.
** length, name, title = line.chomp.split(/\s*\|\s*/)
** a, b = length.scan(/\d+/)

------------------------------------------------------------------------------------------------------------------------

RANGE
Ha vari metodi che ti permettono di accedere al contenuto
* max, include, include?, reject, inject, ...

Un range può anche essere basato su degli oggetti, non solo su stringhe e numeri. L'importante è che l'oggetto:
* abbia il metodo "succ"
* implementi il metodo astronave (spaceship operator) <=>
Questa versione del range basato su oggetti è poco usato.

Serve principalmente per implementare tre cose:
* Sequenze
* Condizioni
* Intervalli

* sequenze
** .. inclusivo, ... esclude l'ultimo elemento.
** posso convertirla in un array o in un enumeratore

* condizioni
** può essere usato come espressione condizionale, può funzionare come un interruttore on-off
** on quando la condizione nella prima parte è vera
** off quando la condizione nella seconda parte è vera
** esempio se leggo un file posso dire
*** puts line if line =~ /start/ .. line =~ /end/ (cioè se la prima parola è start e l'ultima è end)


* intervalli
** serve per vedere se un valore sta in un intervallo, dobbiamo usare l'operatore ===
** p (1..5) === 2, p (1..5) === 3.14 -> entrambe vere.
** si usa per esempio in un case quando devo verificare un continuo nell'intervallo

OSS.
l'operatore === è definito nelle classi e si può usare per controllare se il tipo della classe è lo stesso di un'altra
SI USA ANCHE CON LE CLASSI DERIVATE


