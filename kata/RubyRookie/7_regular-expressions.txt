Regular Expressions
* vedere se la stringa matcha un pattern;   // =~ S, // !~ S (vale anche S =~ //, S !~ //)
* cambiare una stringa;   sub, gsub
* estrarre da una stringa dei valori;

* carrattei riservati: . | ( ) [ ] { } + \ ^ $ * ?
* se li voglio usare come caratteri che devono matchare in una stringa, nella regex devo mettere davanti il simbolo: \
* devo usare il \ anche per il carattere / a meno di non usare la sintassi Regexp.new o %r{}.
** es: /\*/ match del carattere *, in questo caso avendo l'escape viene considerato come un carattere come tutti gli altri

------------------------------------------------------------------------------------------------------------------------

VEDERE SE LA STRINGA MATCHA UN PATTERN
* Sintassi:
stringa =~ /regex/ -> num o nil
/regex/ =~ stringa -> num o nil
stringa !~ /regex/ -> true o false
/regex/ !~ stringa -> true o false

* /cat/ è una regex come "cat" è una stringa
* il match ritorna un numero che è la posizione dove comincia il match nella stringa altrimenti nil.
* quindi con la sintassi stringa =~ /regex/ ho in uscita un true se il match c'è, perchè mi ritorna un numero che vale
true, o false se non c'è il match perchè nil è come false.

Altri esempi di sintassi:
/a/ =~ 'cane' -> 1
/a/.match('cane') -> torna un oggetto MatchData
Regexp.new('a').match('cane') -> torna un oggetto MatchData
In sostanza quando chiamo il match, mi torna un MatchData
Se il match fallisce tutti tornano nil

Differenza fra =~ e .match
* Con =~ ho a disposizione le variabili $&, $`, $' che contengono informazioni sul match.
** Sono variabili globali, e sono brutte da vedere e utilizare. ($` + $& + $' riottengo la stringa originaria)
** Sono il pre_match, il match e il post match.
* Con .match ho a disposizione i metodi pre_match, post_match, [0]
** Comunque riempie anche le variabili $ precedenti ma le stesse informazioni ora le posso chiedere a un oggetto.
** result.pre_match + result[0]  + result.post_match è la stringa originaria

------------------------------------------------------------------------------------------------------------------------

CAMBIARE UNA STRINGA
* sub -> cambia solo il primo match
* gsub -> li cambia tutti (global sub)

NB
* sub è diverso da sub!
** a parte la differenza data dal bang method, se sub non matcha ritorna la stringa originaria, invece sub! tonra nil.

------------------------------------------------------------------------------------------------------------------------

ANCORA SULLA REGEX

La regex è un oggetto, in quanto istanza della classe Regexp e come tale può essere assegnato ad una variabile.
Ci sono diversi modi per istanziare una regexp
p1 = /mm\/dd/
p2 = Regexp.new('mm/dd') -> utile per regexp che contengono il carattere /
p3 = %r{mm/dd}  -> utile per regexp che contengono il carattere /

OPZIONI (esempio)
Ce ne sono molte, questo è un esempio del case insensitive.
i -> case insensitive; /cat/i    Regexp.new('cat', 'i')   %r{cat}i
Si può specificare anche l'encoding della regular expression, normalmente usa quello del file in cui si trova.

------------------------------------------------------------------------------------------------------------------------

CARATTERI RISERVATI
E' solo un'infarinatura, ci sarebbero troppi dettagli e servirebbe un libro solo per le regexp.



ANCORE
Matchano solo all'inizio di una stringa: ^, \A
* Come dire, la stringa deve iniziare per ...
* /^123/ -> la stringa deve iniziare per 123

Matchano solo alla fine di una stringa:  $, \Z
* Come dire, la stringa deve finire per ...
* /123$/ -> la stringa deve finire per 123

Bordi: \b, \B
* Marchanto la stringa esatta, con o senza spazi.
 ** /\bcat\b/ matcha solo la parola cat, se scrivo xcatx non trova nessun match.

------------------------------------------------------------------------------------------------------------------------

CLASSI DI CARATTERI
* E' un insieme di caratteri tra [].
** Ci posso mettere anche i caratteri speciali tuttavia i i caratteri del tipo \n, \s, ... rappresentano comunque
nuova riga, spazio, ...
** Se ci metto dei -, vuoli dire tutto quello tra gli estremi: [A-Z]
** Posso negare una classe di caratteri merdiante il simbolo ^: [^A-Z]
** alcune classi di caratteri sono molto utilizzate perc cui ci sono delle abbreviazioni. \d = [0-9]. Possono essere
usate sia nel pattern che nella classe di caratteri.
* Possiamo dire alla Regexp come interpretare i caratteri. (?d) default, (?a) ASCII, (?u) UNICODE (cosa nuova di ruby 2)
* Se all'interno delle [] voglio usare le [] o i - li devo escapare, infatti nelle le classi di caratteri si
scivono con questi caratteri [ ] -, quindi per forza li devo escapare.
* Posso creare intersezioni di caratteri di classi usando &&. Es: tutte le non vocali:  /[[a-z]&&[^aeiou]]/
* lo \p permette di matchare caratteri speciali come quelli matematici che hanno codifiche particolari. Es: /\p{Alnum}/
* il punto (fuori dalle parentesi) . rappresenta qualsiasi carattere eccetto la newline.

------------------------------------------------------------------------------------------------------------------------

RIPETIZIONI
Tutti gli operatori seguenti hanno sia la versione avida che lazy.

r = regular expression
r*     -> 0+
r+     -> 1+
r?     -> 01
r{m,n} -> almeno m e al massimo n
r{m,}  -> almeno m
r{,n}  -> al massimo n
r{m}   -> m

Questi operatori hanno una precedenza alta così che /ab+/ non significa che matcha una sequenza di ab, ma matcha a
seguita da una o più b.
Sono definiti operatori avidi perché matchano tutto quello che possono e poi ritornao.
La versione lazy che esce appena la condizione è soddisfatta si ottiene aggiungendo un ?
avido /\s.*\s/    moon is made of
lazy  /\s.*?\s/   moon

OSS.
Nelle regexp avanzate si usa una terza forma di ripetizione detta possessiva. Vedere dopo.
ES: X++

------------------------------------------------------------------------------------------------------------------------

ALTERNANZA
Il | la escapiamo perchè altrimenti significa una cosa O un'altra. d|e significa d oppure e.
Il | ha una precedenza molto bassa:
/red ball|angry sky/ matcha [red ball] o [angry sky] e non [red ball sky] o [red angry sky].
Per ottenere l'ultimo match dobbiamo overraidare il default e usare il raggruppamento.

------------------------------------------------------------------------------------------------------------------------

RAGGRUPPAMENTO
Si possono usare le () per raggruppare le regexp, ogni cosa tra () viene trattata come una regexp a se e il risultato
del match tra parentesi viene memorizzato in una variabile che eventualmente posso riutilizzare.
banana /an+/   -> an
banana /(an)+/ -> anan

I risultati nei match delle () sono disponibili come variabili
* nel codice ruby, e a cui posso riferirmi con $1, $2, ...
* all'interno del patter stesso. e a cui posso riferirmi con \1, \2, ...
** questo permette di cercare dei match che contengono una certa sorta di ripetizioni. Come vediamo poco più avanti
/(\d\d):(\d\d)/ =~ '12:50'
"Hour #$1, minute #$2" ---> "Hour 12, minute 50"

Se invece uso un MatchData abbiamo l'analogo:
md = /(\d\d):(\d\d)/.match('12:50')
"Hour #{md[1]}, minute #{md[2]}"  ---> "Hour 12, minute 50"

Un modo per cercare varie forme di ripetizione:
Posso usare anche i nomi per raggruppare che sono più parlanti.
?<name> ----> \k<name>  (oppure ?<name> ----> \k'name', posso usare <> o '' un po' come voglio)
@show.regex('banana', /(?<name>\w+)\k<name>/) #anan
Nel caso precedente sto cercndo un match con più caratteri che si ripetono, nel dettaglio:
* (\w+) più caratteri che memorizzo nella variabile $1
* (?<name>\w+) quello che c'è in $1 mettimelo nella variabile <name>
* /(?<name>\w+)\k<name>/ \k<name> riuso quello che c'è in <name>.
* in definitiva prendo il massimo numero di ripetizioni di più parole. anan

I nomi matchati sono anche disponibili come variabili locali ma solo se usiamo la sintassi =~ e se compaiono a sinistra.
/(?<hour>\d\d):(?<minute>\d\d)/ =~ '12:50'
al che posso scrivere: "#{hour} - #{minute}"

------------------------------------------------------------------------------------------------------------------------

SOSTITUZIONE BASATA SUI PATTERN
value = 'quick brown box'
value.sub(/[aeiou]/, '*')  -> q*ick brown box
value.gsub(/[aeiou]/, '*') -> q**ck br*wn b*x

Se invece a sub e gsub passo un blocco, il valore del match viene passato al blocco e il risultato del blocco messo
nella stringa originaria.
value.sub(/^./) {|match| match.upcase} -> Quick brown box

Se ho più cose da sostituire posso anche passare alla gsub una hash.
rep = {'cat' => 'feline', 'dog' => 'canine'}
rep.default = 'X'
'cat and dog'.gsub(/\w+/, rep) # feline X canine

------------------------------------------------------------------------------------------------------------------------

SEQUENZE DI BACKSLASH NELLA SOSTITUZIONE
Le sequenze che si possono usare all'interno del pattern come \1, \2, ecc, si possono usare anche dentro alla sub e gsub.
'fred:smith'.sub(/(\w+):(\w+)/, '\2:\1' ) -> 'smith:fred'

Esistono anche degli shortcut
'fred:smith'.sub(/(\w+):(\w+)/, '\+:\+' ) -> 'smith:smith', infatti \+ sta per ultimo gruppo matchato.
Abbiamo cose del tipo
\& ultimo match
\+ ultimo gruppo di match
\` stringa che precede il match
\' stringa che segue il match
\\ il carattere \ (backslash)

OSS: se voglio includere un backslash in una sostituzione devo avere una cosa del tipo
str.gsub(/\\/, '\\\\\\\\') # prendi il backslash e sostituiscilo con quello doppio

------------------------------------------------------------------------------------------------------------------------

REGEXP AVANZATE
Ruby usa Onigmo come libreria per le regexp.

------------------------------------------------------------------------------------------------------------------------

ESTENSIONI
(?:) -> raggruppa ma non genera backreference del tipo \1, $1, ecc.
(?#) -> serve per commentare

------------------------------------------------------------------------------------------------------------------------

LOOKAHEAD
Posso cercare le parole che matchano e solo se sono seguite da un altro pattenr che matcha.
red,white,blue yellow'.scan(/[a-z]+(?=,)/) # [red, white]
red ok, perché dopo è seguita da una virgola
red white, perché dopo è seguita da una virgola
il resto non va bene

LOOKBEHIND
Una cosa analoga alla precedente
red,white,blue yellow'.scan(/(?<=,)[a-z]+/) # [white, blue]
da notare che il pattern con <= è messo prima della regexp, mentre nell'esempio precedente zena < è messo dopo.
OSS: come pattern behind cose del tipo (?<aa) (?<aa|bbb) vanno bene, mentre (?<a+b) non vanno bene

Entrambe le forme lookahead e look behind hanno la negazione.
(?!re) oppure (?<!re)

OSS:
\K
non infuenza il processo di matching ma quando ruby cerca di memorizzare l'intero match (ricordiamo che lo butta
nella variabile $& oppure \&) memorizza solo il testo alla destra di \K.
'thx1138' =~ /[a-z]+\K\d+/ ---> 1138 # senza \K matcherebbe tutto

------------------------------------------------------------------------------------------------------------------------

BACKTRACKING
'test XXXY' =~ /(X+)(?!O)/ # XXX
'test XXXO' =~ /(X+)(?!O)/ # XX
Nel secondo caso il match fallisce, ma il codice torna indietro e cerca di matchare il più possibile, quindi prende
le due XX. Questo modo di tornare indietro e rimatchare si chiama backtracking. In sostanza quando un match fallisce
il motoreregexp torna indietro e cerca di matchare in modo differente.


Ci sono un paio di  modi per ferrmare il backtracking
(?>re) innesta una regexp che è valida fino alla prima regexp dopo questa.
'test XXXO' =~ /(?>X+)(?!O)/ # XXX
'test XXXO' =~ /(?>X+)(?!O)/ # No match!

Un altro modo è questo:
'test XXXO' =~ /(X++)(?!O)/ # XXX
'test XXXO' =~ /(X++)(?!O)/ # No match!

------------------------------------------------------------------------------------------------------------------------

BACKREFERENCES AND NAMED MATCHES
I numeri con coui si raggruppano sono relativi alla posizione, per cui si puo scorrerli anche all'indietro, tuttavia
bisogna usare la sintassi \k per poter utilizzare dei numeri negativi (d'altronde deve capire che il carattere -
è un meno e non un carattere normale)
'abab' =~ /(.)(.)\1\2/) # matcha abab
'abba' =~ /(.)(.)\k<-1>\k<-2>/) # matcha abba: 1 = a, 2 = b ---> da cui -1 = b, -2 = a

Posso anche memorizzare un pattern in una variabile e poi riutilizzarlo con \g
'red sun blue moon' =~ /(?<color>red|green|blue) \w+ \g<color> \w+/) # red sun blue moon
Infatti memorizza in color il pattern red|green|blue
Poi lo riutilizza con la chiamata \g<color>
Quindi:
\k riutilizza ciò che è stato matchato
\g riutilizza il patter per matchare

Le regexp posso anche essere scritte su più righe e con dei commenti in modo da essere più leggibili. Questo è un
esempio:
Osserviamo in questo particolare caso che \g è riutilizzato ricorsivamente
re = /
    \A
      (?<brace_expression>
        {
          (
            [^{}]                      # Tutto ciò che non sono graffe  ---> posso usare i commenti in ruby-style
          |                            # oppure
            \g<brace_expression>       # una espressione innestata
          )*
        }
      )
    \Z
/x   ---> dice che posso scrivere la regexp con molto spazio e su più righe

'{12}' =~ re # {12}
'{12 {23}}' =~ re # {12 {23}}

------------------------------------------------------------------------------------------------------------------------

GRUPPI INNESTATI
Dato che i livelli di innesto possono essere molteplici, possiamo specificare con un +n o -n il livello di innesto che
stiamo intendendo.
Supponiamo di avere diversi livelli di innesto

...
(?<some_letter>\w)
\g<palindrome>
\k<some_letter+0>
...

Il +0 significa il some_letter è quello matchanto allo stesso livello di innesto.

------------------------------------------------------------------------------------------------------------------------

GRUPPI CONDIZIONALI
Per esempio vogliamo che venga matchato il pattern la seconda volta solo se la prma volta ha matchato.
Detto ?<pattern>, la seconda volta che lo nominiamo scriviamo (?<pattern>)