MiniTest::Unit o Test::Unit

Per hanno gli sviluppatori hanno usato Test::Unit ma poi nel tempo è stata creata una versione un po' più snella.
Molte delle asserzioni di MiniTest ricalcano quelle di Test, altre sono state rinominate (assert_not_nil -> refute_nil)
e alcune funzionalità rimosse.

Quandi abbiamo diverse alternative:
require minitest/unit -> per usare le funzionalità di MiniTest
require test/unit     -> per usare MiniTest con il layer di compatibilità di Test::Unit che aggiunge a MiniTest le
                         funzionalità di cui è stato sfrodato.
Installare la gemma test-unit -> per oavere l'originale framework Test::Unit

Comunque lo standard è il Test::Unit.

Per ogni asserzione positiva abbiamo anche l'asserzione negativa:
assert_equal --> refute_equal

Posso sempre passare come ultimo parametro un messaggio, che verrà visualizzato prima dell'output di fallimento.

------------------------------------------------------------------------------------------------------------------------

STRUTTURARE I TEST
I test devono iniziare con la parola test, perché viene usata la reflection per lanciarli. Tutti i metodi che iniziano
con test vengono lanciati.

il metodi setup e teardown 'decornao' ogni test e non l'intera suite di test.

------------------------------------------------------------------------------------------------------------------------

LANCIARE I TEST
Per lanciare l'intera suite:                    ruby the_testing_framework_test.rb
Per lanciare un singolo test:                   ruby the_testing_framework_test.rb -n test_1
Per lanciare dei test che matchano una regexp:  ruby the_testing_framework_test.rb -n /1/

------------------------------------------------------------------------------------------------------------------------

DOVE METTERE I TEST
Nel file di test non ci dovrebbe essere una intestazione del tipo
require 'test/unit'
require '../lib/my_source'

in quanto il require_relative potrebbe non funzionare. Infatti se la classe che carico (my_source) contiene un require
(require 'my_source2') il test non riesce a caricare quest'ultimo.
La soluzione da adottare è che la directory di livello più alto (lib) sia nel load_path insieme alle altre componenti
dell'applicazione.

Una volta fatto ciò il test potrà essere scritto come segue
require 'test/unit'
require 'my_source'
che è la cosa giusta; e i test potranno essere lanciati con il comando:

ruby -I app_path/lib app_path/test/file_di_test.rb

oppure se si è già nella directory dell'applicazione (app_path) nel modo più semplice:

ruby -I lib test/file_di_test.rb

------------------------------------------------------------------------------------------------------------------------

SUITE DI TEST
Posso raggruppare i file di test con una certa razionalità e poi lanciarli in un colpo solo lanciando un solo file:
ES:
require 'test/unit'
require_relative 'test_connect'
require_relative 'test_query'
...

------------------------------------------------------------------------------------------------------------------------

RSpec e Shoulda

RSpec e Shoulda hanno focus differenti.
RSpec è pensato per un vero TDD, prima scrivo il test e poi il codice, anche lo stile della sintassi rispecchia questo.
Shoulda invece è pensato per un testing vero e proprio, che non matcha necessariamente l'AT del cliente.

Mentre RSpec è un vero e proprio framework, Shoulda lavora insieme a un framework, sia esso Test::Unit o RSpec. Perciò
si possono mixare i test Shoulda con i metodi di test di Test::Unit o RSpec.

------------------------------------------------------------------------------------------------------------------------

RSpec

Per installare RSpec:
gem install rspec

La sintassi di RSpec:
describe 'TennisScorer', 'basic scoring' do

  it 'should start with a score of 0 - 0'
  it 'should be 15 - 0 if the server wins a point'
  it 'should be 0 - 15 if the receiver wins a point'

end
OSS: l'output sarà del tipo:
***
Pending: (Failures listed here are expected and do not affect your suite's status)

  1) TennisScorer basic scoring should start with a score of 0 - 0
     # Not yet implemented
     # ./rspec_spec.rb:3

  2) TennisScorer basic scoring should be 15 - 0 if the server wins a point
     # Not yet implemented
     # ./rspec_spec.rb:4

  3) TennisScorer basic scoring should be 0 - 15 if the receiver wins a point
     # Not yet implemented
     # ./rspec_spec.rb:5

Finished in 0.00046 seconds (files took 0.07409 seconds to load)
3 examples, 0 failures, 3 pending

Per lanciare RSpec
rspec file_spec.rb


