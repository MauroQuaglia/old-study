ESPRESSIONI

Quello che per C# o Java è un'istruzione, per Ruby è un'espressione.
my_if =
    if 0 == 0
        'ciao'
    end
poi quando chiamo la my_if, la esegue.

In Ruby tutti gli operatori sono definiti come chiamate a metodi per cui a + b = a.+(b).
* Chiamo il metodo + su a e gli passo come parametro b.


Posso ridefinire un'operazione usando la parola alias:
class Fixnum
  alias old_plus + # E' come se tenesse un puntatore al vecchio metodo

  def +(other)
    self.succ
  end
end
1 + 3 = 2
1.old_plus(3) = 4


OSS:
fail                  lancia un RuntimeError
fail ArgumentError    lancia un ArgumentError



Posso definire su una mia classi tutti i metodi che voglio, per esempio come quelli usati normalmente su un array:
<< (che poi dovrà tornare self se volgio poter concatenare cose del tipo << 1 << 2 ...)
[] indexing

Per esempio una definizione per l'indexing è questa:
def []=(key, value)
  # indice è key
  # valore è value
end
e poi si può chiamare così, dove la prima sintassi è quella più elegante.
sk[1] = 2
sk.[] = (1, 2)

------------------------------------------------------------------------------------------------------------------------

ESPANSIONE DI COMANDI

Se uso `` (backticks) o %x{} posso eseguire un comando relativo al mio sistema operativo.
l'exit status è disponibile nella variabile $?
ES:
puts `date` # Fri May  8 11:07:00 CEST 2015
puts $?     # pid 4386 exit 0

OSS:
anche ` è un metodo e può essere ridefinito.
Posso scriverlo ovunque senza specificare che riapro Object. Infatti ` è un metodo definito in Object.

alias old_backquote ` # Il puntatore al 'vecchio' metodo.
def `(cmd)
  result = old_backquote(cmd)
  if $? != 0
    puts "Command: [#{cmd}] failed with status: [#{$?.exitstatus}]!"
  end
  result
end

Al che si ha una cosa del genere:
print `ls -l /etc/wibble`
# ls: cannot access /etc/wibble: No such file or directory
# Command: [ls -l /etc/wibble] failed with status: [2]!

------------------------------------------------------------------------------------------------------------------------

ASSEGNAZIONE
L'assegnazione torna il valore assegnato. Questo è il motivo per cui si possono fare inizializzazioni multiple
p a = 6 # 6

NB: il valore dell'assegnazione è sempre il valore del parametro, anche si poi ci metto un return!
def val=(val)
    @val = val
    return 99
end
Non torna 99, ma il valore di val.

------------------------------------------------------------------------------------------------------------------------

ASSEGNAZIONE PARALLELA
a, b = 1, 2              # a = 1, b = 2
a=1,2,3,4  #a=[1,2,3,4]; anche se non metto le parentesi, nel momento in cui vede più valori li memorizza in un array.

E' possibile utilizzare anche lo splat, sia a sinistra che a destra.
A sx posso avere solo uno splat, a dx anche più di uno.
a, b, c, d = *(1..4)
a, b, c, d, e = *(1..2), 3, *[4, 9]
g, *a, b = 1, 3, 9, 5
posso anche ignorare dei parametri con il solo asterisco
f, *, l = *(1..10)  f = 1, l = 10

ASSEGNAZIONE INNESTATA
Ci possono essere anche degli assegnamenti innestati.
a, (b, c), d = 1, 2, 3, 4
a = 1
(b, c) = 2 -> b=2, c=nil
d = 3

ALTRE FORME DI ASSEGNAZIONE
Gli operatori ++ e -- non ci sono.
Usiamo += e -=.
OSS: a += 2, viene convertito prima nella forma a = a + 2, poi eseguito.

------------------------------------------------------------------------------------------------------------------------

CONDIZIONAI
nil, false     ---> false
tutto il resto ---> true

shortcircuit evaluation
and e && ritornano il primo membro se false, atrimenti valutano ed eventualmente ritornano il secondo membro.
nil && 99 = nil, true && 99 = 99

or e || ritornano il primo membro se true, altrimenti valutano ed eventualmente ritornano il secondo membro.
nil || 99 # 99
'ciao' || nil # ciao

precedenze
and, or hanno la stessa precedenza
&& ha precedenza più alta rispetto a and
|| ha precedenza più alta rispetto a or
&& ha precedenza più alta rispetto a ||

IDIOMA DI ASSEGNAZIONE
Un idioma comune è assegnare un valore a una variabile solo se non è ancora assegnato.
var1 = 'x'
var1 ||= 'y'
# var1 = x

var1 = nil
var1 ||= 'y'
# var1 = y


DEFINED
defined?
nil se l'argomento non è definito
una descrizione se l'argomento è definito.
p defined? String      # constant
p defined? String.new  # method
p defined? $?          # global-variable

------------------------------------------------------------------------------------------------------------------------

COMPARAZIONE TRA OGGETTI

Gli oggetti ruby supportano il confronto grazie ai metodi:
==, ===, <=>, =~, eql?, equal?

== (!=)      testa se il valore è uguale. (1 == 1.0 ok)
===          stesso tipo di base e valore. (1 === 1.0 ok; numeric di base e 1 di valore)
<=>          ritorna -1, 0 o 1 in base se quello che riceve è <, == o > del suo argomento.
<, <=, >=, > operatori di comparazione
=~           comparazione per regexp (!~)
eql?         stesso tipo e valore (1.eql?(1.0) ko; integer non è float)
equal?       stesso object-id

A parte <=> sono tutti in classe object, ma vengono poi ridefiniti nelle classi figlio per supportare le semantiche
corrette. ES: [1, 2] == [1, 2] (stessi elementi nelle stesse posizioni)

OSS (versioni negative):
Se le negazioni non sono definite, ruby cerca la definizione di == e nega il risultato.
Vedi class T di esempio.


IF
la keyword then è opzionale se vado a capo. Se metto tutto su una linea allora ci vuole.
if, then, elsif, else, end. Sono le varie keyword che si possono usare
dato che la if è un'espressione, essa ritorna un valore e questo può essere memorizzato in una variabile
unless = if not
c'è anche l'operatore ternario.... condition ? true : false
id e unless possono anche essere messi alla fine di uno statements. return 'c' if ...



CASE
praticamente una if con steroidi... una multi-if.
case, when, then, else, ,, end
la keyword then si usa se voglio scrivere tutto su una riga, se vado a capo non serve.
case a
    when 1...10   then p 'ciao'
posso usare la virgola per separare più condizioni con lo stesso output.    when 1, 2
NB: la comparazione del valore con il target è fatto dal case usando l'operatore ===
posso valutare sia le singole when che solo il case
1) case
when XXX=AAA
when YYY=BBB
when ZZZ=CCC
2)
case VALUE
when XXX
when YYY
il case ritorna l'ultima operazione eseguita quindi la posso memorizzare.
OSS.
l'operatore === è definito nelle classi (Class) e si può usare per controllare se il tipo della classe è lo stesso di un'altra
SI USA ANCHE CON LE CLASSI DERIVATE



-LOOPS- (while ed until sono le uniche primitive per il loop )
WHILE eseguo finché è true la condizione
UNTIL eseguo finchè è false la condizione
Entrambi si possono usare alla fine di uno statements: a += 1 while a <= 3
per fare scattare il while almeno una volta posso usare il begin end (do..while in C#)

OSS: il range .. è come un interruttore
ritorna true quando il primo evento succede e rimane true finche il secondo evento non succede.
File.foreach('numbers.txt') do |line|
    puts(line) if line =~ /two/ .. /five/
end
mi scrive  two three four five
Dato che gli estremi del range vengono valutati tutte le volte posso anche usare espressioni combinate



ITERATORI
OSS. in ruby il FOR non c'è come iteratore esterno, ma compare spesso come iteratore interno, in modo che sia più difficile commettere errori.
ES:
3.times {p 'A'}
1.upto(3) {p 'B'} -> è come se fosse il for
3.downto(1) {p 'C'}
1.step(3,1) {p 'D'}
[1, 2].each{|x| p x}
NB:
una volta che una classe supporta l'each i metodi addizionali dell'enumerable sono disponibili
File.open('numbers.txt').grep(/e$/){|l| puts l} tutti quelli che finiscono per 'e'
* dato che file ha il metodo each posso ciclare su tutte le righe


TRA GLI ITERATORI C'E' ANCHE
LOOP
loop do
...
end
e
FOR..IN
che però è solo uno zucchero sintattico per il metodo each
a = [1, 2, 3]
a.each{|v| puts v}
for v in a
  puts v
end
quando ruby vede il for in lo traduce nel metodo each.
Tuttavia una differenza c'è e riguarda lo scope delle variabili che sono definite nel body del metodo






Quando si usano tutti queste cose è utile conoscere anche le parole chiave: break, redo, next. La parola chiave retry non c'è più. Con il ruby nuovo è stata rimossa.
questi permettono di alterare il flusso normale dell'iteratore
break esce dal ciclo
next salta il giro
redo riprova il ciclo appena effettuato senza rivalutare la condizione
al break posso anche passare un valore che è quello che viene tornato dal ciclo. Altrimenti il ciclo torna nil.
whl = while i < 3 ... break(i) if i == 2. così whl = i
si può passare anche al next ma non serve a nulla


SCOPE
while, until e for non introducono nuovi scope, e se definisco una variabile AL LORO interno poi c'è anche nel codice.
Per i blocchi e gli iteratori invece è diverso, creano un loro scope, per cui se definisco una variabile nel blocco poi non
me la ritrovo più nel codice.
Se però il blocco usa delle variabili già definite, poi i valori delle variabili sono influenzate dal blocco.
Comunque le variabili si possono definire locali anche all'interno del blocco |val; scope|





