Le collezioni sono gestite in due modi: array, hash.

Array
il metodo [] è in sostanza un getter, mentre il metodo []= è un setter.
Se gli passo un indice negativo, conta al contrario.
Se all'interno di un'array creo dei gap, questi vengono colmati con dei nil.
a[0]=a [2]=c --> a[1]=nil

getter
Posso anche specificargli degli estremi in modo che vengano presi gli elementi tra gli estremi (sempre presi da sinistra
a destra):
a[1..3] -> prende gli elementi dalla posizione 1 alla 3 compresa
a[1...3], a[-3..-1], a[4..-2]
a[-2..1] -> torna [] se la posizione del primo estremo è dopo quella del secondo. In sostanza non fa il giro!

Oppure posso partire da una certa posizione e prendere tot elementi:
a[2, 4] parte dalla posizione 2 e ne prende in tutto 4.
Oss. In generale quindi a[2..4] != a[2, 4]

setter
Se come indicizzazione uso due numeri o un range allora gli elementi nell'array originario sono sostituiti con tutto
ciò che sta a destra dell'assegnamento.
a[1]=[1,2,3] -> in posizione 1 metterà un array con valori [1,2,3]
a[2, 2] = 'x' -> dalla posizione due, prendo in tutto due elementi, e li rimpiazzo con uno solo che vale x.
a[2, 0] = 'y' -> inserisco y davanti al secondo elemento.
a[1, 1] = [9, 8, 7] -> occhio, è diverso dal primo esempio. Qui mi metto in posizione 1 e rimpiazzo quel singolo
                       elemento con tre elementi: 9, 8, 7.
a[0..3] = [] -> butto i primi 4 elementi dell'array.
a[1..2] = 99, 98, 100 -> da elemento 1 fino a 2 rimpiazzo con i tre elementi 99, 98, 100

Gli array hanno molti metodi e possono essere usati come stack, queue, ecc. Infatti dispongono dei metodi push, pop,
shift, ecc.

per tornare i primi o gli ultimi elementi di un array posso usare
a.first(2) # i primi due
a.last(3) # gli ultimi tre
Oss. a.first(1) != a.first, infatti il primo torna un array di un elemento, il secondo l'elemento.

Riassumendo, posso usare queste modalità di getter e setter:
a[n]
a[n..m]
a[n, m]

------------------------------------------------------------------------------------------------------------------------

Hash
Per indicizzare le chiavi
'key' => 'value'
:key => 'value'
key: 'value' # shortcut per il precedente

NB - differente da altri linguaggi: ruby si ricorda l'ordine di inserimento degli elementi nella hash, quindi posso fare
affidamento sull'ordinamento!

------------------------------------------------------------------------------------------------------------------------

Blocchi
Il blocco è semplicemente un pezzo di codice.
Come succede per un metodo, il blocco può prendere dei parametri. {|p1, p2| ...}
Metodo {blocco}, metodo(parametri) {blocco} Possiamo pensarlo come ad un parametro extra passato al metodo.

Scope:
Se c'è una variabile all'interno del blocco con lo stesso nome di una variabile nello stesso scope ma all'esterno
del blocco, le due sono la stessa cosa.
Se la variabile compare solo nel blocco all'ora vive solo nello scope del blocco.
I parametri del blocco, sono sempre locali al blocco anche se hanno lo stesso nome di una variabile definita al
di fuori del blocco.
Posso definire delle variabili locali al blocco così: {|item; x, y, z|} dove item è la variabile a cui viene passato
il valore dall'iterator e x, y e z sono variabili locali al blocco.
Posso anche inizializzare una variabile nel blocco: {|item, n: 0|} NB: rispetto a prima devo mettere la virgola dopo
item

------------------------------------------------------------------------------------------------------------------------

Iterator
Un ITERATOR è un metodo che può chiamare un blocco di codice.
In sostanza chiamo l'iteretor e gli passo un blocco (.each{|| ...})
Il blocco non viene eseguito nel momento in cui ruby lo incontra, tuttavia ruby si ricorda il contesto del blocco, le
sue variabili locali, ecc)
All'interno del metodo posso invocare il blocco con "yield"
Posso passare parametri al blocco: (yield param1, param2)
Posso ricevere valori dal blocco: Il valore dell'ultima espressione valutata nel blocco è ritornata.

NB: differenza con altri linguaggi
Vantaggio
la collezione in questione fa quello che sa fare meglio, ciò accedere ai suoi elementi. Devo solo
dirgli cosa fare con quegli elementi tramite il blocco. In altri linguaggi invece mi devo preoccupare anche del ciclo!
In ruby gli iteratori sono interni alla classe, in altri linguaggi mi devo far dare l'iteratore e poi mi devo
preoccupare di scorrere gli elementi.
Svantaggi
Se non posso gestire manualmente gli iteratori diventa difficile scorrere due collezioni contemporaneamente.
Soluzione: in queste occasioni abbiamo a disposizione la classe Enumerable che implementa un iteratore esterno. Basta
chiamare il metodo to_enum (o enum_for)

Esempi di iteratori
*each
il più semplice degli iteratori, passa al blocco gli elementi della sua collezione

*find
cerca il primo valore in una collezione che soddisfa la condizione del blocco, altrimenti torna nil.

* map (o collect, sono la stessa cosa. Uno è un alias dell'altro.)
passa ogni elemento al blocco e alla fine mi ritorna un array con tutti i nuovi valori

* inject
permette di accumulare valori, scorrendo una collezione.
Somma dei valori -> [3, 2, 1].inject(){|sum, x| sum + x}  # Parte a sommare dal  3.
Somma dei valori -> [3, 2, 1].inject(0){|sum, x| sum + x} # Parte a sommare da 0.
oppure posso anche specificare il metodo da chiamare agli elementi successivi della collezione.
Somma dei valori -> [3, 2, 1].inject(:+)

OSS.
Posso tenere traccia anche della posizione su cui sto iterando con il metodo "with_index"
L'iteratore ti passa il valore corrente, con la chiamata addizionale with_index ti viene passata anche la posizione.
"with_index" è un metodo addizionale, così che possiamo aggiungerlo a un qualsiasi iteratore.
Es.
each.with_index
find.with_index

------------------------------------------------------------------------------------------------------------------------

Enumerator

Sono iteratori esterni c come 'quasi' tutto in ruby sono degli oggetti.

Quasi tutti gli iterator, se chiamati senza blocco, ritornano l'enumerator.
Posso chiamare il metodo 'loop' che continua a richiamare l'enumerator finchè questo non ha finito. In generale però
devo fare attenzione, perché se non uso un enumerator lui continua indefinitamente a chiamare il blocco che ha
associato.

Modi per recuperare l'enumerator:
'xxx'.enum_for(:each_char)  # torna l'enumerator del metodo each_char
'xxx'.each_char             # se non gli passo il blocco torna l'enumeratore
'xxx'.to_enum               # occhio che qui torna l'enumerator del metodo each

Se il metodo che usiamo come base per l'enumeratore prende dei parametri, quest possiamo anche passarli all'enum_for.
(1..10).each_slice(3).to_a # each_slice usa l'enumerator e prende parametri.
(1..10).enum_for(:each_slice, 3).to_a

Sugli enumeratori è definito il metodo each_with_index che ti da anche la posizione.
* each.with_index(10) -> comincia a contare da 10
* each_with_index -> comincia a contare da 0, non posso parametrizzarlo!

Posso anche io creare un enumeratore
Questi viene eseguito fino allo yield, che torna un valore al codice, il codice fa quello che deve e se richiama
l'enumeratore questo riprende da dove aveva lasciato, cioè l'istruzione dopo lo yield.

Un oggetto Enumerator è anche un enumerable quindi abbiamo a disposizione i metodi dell'enumerable

Es:un contatore
counter = Enumerator.new do |yielder|
  count = 0 #inizializzo a 0
  loop do
    count += 1
    yielder.yield count # Qui torna il valore. versione compatta: yielder << count
  end
end

a questo contatore (counter.next...) non posso passare nessun blocco. Però posso modificarlo
per fare in modo che prenda anche un blocco. (creo un generator, un generatore di enumeratori)

def xxx(enumerator, &block)
  Enumerator.new do |yielder|
    enumerator.each do |value|
      yielder << value if block.call(value)
    end
  end
end

poi posso chiamrlo così:
xxx(counter) {|n| n % 2 == 0 }.first(10)

Se voglio posso anche aprire la classe enumerator e aggiungergli metodi che prendono un blocco come parametro.
In pratica aggiungo un filtro all'enumeratore.
class Enumerator
  def selection(&block)
    Enumerator.new do |yielder|
      each do |value|
        yielder << value if block.call(value)
      end
    end
  end
end

ora ho a disposizione il metodo selection su tutti gli enumeratori.

I Lazy Enumerator
Bisogna stare attenti con alcuni metodi chiamati sugli enumeratori (es: count e select) perchè scorrono tutta la
collezione prima di tornare il risultato.
Se chiamo Enumerator#lazy si un qualsiasi enumeratore di Ruby questo agisce come l'originale ma reimplementa alcuni
metodi come select e map che consumano i dati della collezione quanto basta per soddisfare la richiesta.

Su tutti gli enumeratori posso chimare il metodo lazy. Questo mi ritorna un enumeratore come quello originale, ma
reimplementa alcuni metodi come selecte map che escono non appena hanno ottenuto il risultato voluto.

Es:
class Integer
  def self.all
    Enumerator.new do |yielder|
      n = 0;
      loop do
        yielder << n
        n += 1
      end
    #end.lazy
    end
  end
end

Ho aggiunto il metodo all alla classe Integer. La chiamata successiva non termina mai, oppure termina con il risultato
voluto a seconda che l'enumeratore tornato dal metodo all sia 'normale' o lazy.
Integer.all.select{|n| n % 2 == 0}.first(10)

Una notazione alternativa è definire una proc.
multiple_of_two = -> n { (n % 2) == 0 }
Integer.all.select(&multiple_of_two).first(10)
Il vantaggio che può derivare rispetto alla precedente è che posso riutilizzare il blocco multiple_of_two anche in
altre chiamate.

Alternativa a lazy sulla definizione dell'enumeratore.
Se non metto lazy alla definizione dell'enumeratore del metodo all me la posso cavare anche cosi:
Integer.all.select{|i| (i % 3).zero? }.first(10)       # non ritorna mai
Integer.all.lazy.select{|i| (i % 3).zero? }.first(10)  # esce e torna i valori

------------------------------------------------------------------------------------------------------------------------
Ancora sui blocchi

Normalmente un blocco è usato come target di un iteratore. Ma può avere anche un'altra funzione.
OSS: la keyword block_given? serve per sapere se mi è stato passato un blocco quando è stato chiamato il metodo.
if block_given? ... end

Es: nelle transazioni
posso definire un blocco di codice che girerà sotto il controllo di una qualche transazione. Per esempio in
concomitanza alla lettura di un file. (in questo caso il blocco non è target di nessun iteratore.)
def self.open_and_process(*args)
 f = File.open(*args)
 yield f
 f.close
end

Es: come oggetti
Posso memorizzare un blocco in un oggetto, memorizzarlo in una variabile e poi poi utilizzarlo quando mi pare.
Posso passare un blocco implicitamente: metodo(par1, par2){blocco}
Posso passare un blocco esplicitamente: metodo(par1, par2, &block)
In quest'ultimo caso il blocco viene convertito in un oggetto di tipo Proc e asseganto ad una variabile. Dopodichè
posso usare questa variabile alla stregua di qualsiasi altra.
Posso anche farmi ritornare il blocco che ho passato (un getter per esempio) e riutilizzarlo.
Memorizzare un blocco come oggetto e poi poterlo usare in più punti è molto utile tanto che in Ruby ci sono due modi simili (ma non
uguali di farlo):
Sia lambda che Proc.new prendono un blocco e lo trasformano in un OGGETTO di tipo Proc da poter utilizzare in giro. L'oggetto
ritornato non è lo stesso ma differisce leggermente.
x = Proc.new {puts 'Proc'}
y = lambda {puts 'lambda'}

Es: come closure
def n_times(thing)
  lambda {|n| n * thing} # il valore di thing rimane locale al blocco, questa è una closure
end
proc = n_times 3 #anche se il parametro '3' è esterno al blocco, rimane e vive nello scope del blocco.
p proc.call 100 # 300
p proc.call 'X' # XXX

Notazioni alternative per creare le Proc
a = lambda {|n| p n} # il parametro è tra ||
a = -> n {p n} # il parametro è prima delle graffe
oppure anche con più parametri
a = lambda {|n, m| p n + m}
a = -> (n, m) {p n + m}
in entrambe i casi a è un'oggetto Proc.

Anche quando passo i parametri a un blocco posso avere valori di default e parametri splat, keyword e blocchi (con &
davanti).
Possiamo quindiscrivere blocchi verstili come se fossero metodi.
proc = lambda { |a, *b, &block| ...}
proc.call(1, 2, 3, 4){p 'xxx'} # 1; [2, 3, 4]; blocco
Ovviamente anche lcon la notazione alternativa funziona: proc = -> (a, *b, &block) { ... }


