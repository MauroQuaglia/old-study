Le eccezioni impacchettano informazioni circa un errore avvenuto in un oggetto.
Quando viene sollevata viene inoltrata nello stack finché non trova qualcuno che si prende carico di gestirla.
Le informazioni vengono incapsulate in un oggetto Exception o in un suo figlio.

Quando lancio un'eccezione posso usare una di quelle già predefinite in Ruby (146) oppure ne posso creare
io una nuova ma deve derivare da StandardError o uno dei suoi figli, altrimenti non viene agganciata per default.
A ogni eccezione si può associare un messaggio e uno stack backtrace.

OSS
open-uri permette di scaricare pagine web e salvarle in un file.

------------------------------------------------------------------------------------------------------------------------

COSTRUTTO PER LA GESTIONE DELLE ECCEZIONI

begin
    ...
    ...
rescue Exception
    ...
    # un riferimento all'eccezione presa è contenuta nella variabile globale $!
    raise # se la voglio rilanciare (lui in automatico rilancia $!), altrimenti non metto niente.
    retry # se voglio correggere il motivo di eccezione e riprovare ad eseguire il blocco begin-end. Occhio ai loop infiniti!
else
    ...
    viene eseguita solo se non ci sono state eccezioni e prima del blocco ensure
    ...
ensure
    ... #operazioni finali. viene sempre eseguito
    ...
end


OSSERVAZIONI
* Un'alternativa ad usare $! e definire la variabile locale che contiene l'eccezione corrente
rescue Exception => boom

* Ci possono essere più rescue per gestire le eccezioni
rescue StandardError, NameError => boom
rescue SecurityError => security

* Il match tra l'eccezione lanciata e la clausola rescue è fatta tramite l'operatore === (come quello del case).

* Se scrivo rescue senza specificare niente il default è lo StandardError

------------------------------------------------------------------------------------------------------------------------

ERRORI DI SISTEMA
Vengono lanciate quando un errore di sistema (per esempio Linux) ritorna un codice di errore (error code).
Con 'man errno' su linux li posso vedere.
Ruby li decora con uno specifico oggetto eccezione (che deriva da SystemCallError) e ce li mostra.
ES:
`x` # Errno::ENOENT
infatti il comando linux x non ha senso, lancia un error code che viene decorato da ruby da un'eccezione che ha la
forma Errno::ENOENT (No such file or directory (POSIX.1)
Se voglio anche lo status code si può vedere così Errno::ENOENT::Errno, infatti ogni eccezione del tipo Errno::ENOENT ha
una costante Errno che contiene lo status code.

OSS
Attenzione nel mettere l'apertura di un file File.open dentro il blocco begin.
E' sbagliato perchè open può lanciare un'eccezione e se è così di una ensure con un f.close sarebbe sbagliata in quanto
non ci sarebbe nessun file da chiudere.

------------------------------------------------------------------------------------------------------------------------

LANCIARE ECCEZIONI

Per lanciare un'eccezione nel codice posso usare (sono la stessa cosa, ma fail è più parlante di raise)
raise
fail (che è un sinonimo una RuntimeError)
#raise -> RuntimeError (o quella corrente)
#raise 'mp3' -> RuntimeError con messaggio
#raise NameError, 'mp3'  -> NameError con messaggio mp3
#raise NameError, 'mp3', caller -> lo stacktrace è prodotto usando Object#caller method

------------------------------------------------------------------------------------------------------------------------


catch and throw
- raise e rescue si usano quando qualcosa può andare storto.
se volgio abbandonare un ciclo perchè qualcosa non 'mi piace' devo usare il catch end throw, in tal caso niente è andato storto, voglio solo abbandonareil ciclo
esempio
catch(:done) do
      File.foreach('words.txt') do |line|
        throw :done if line.chomp! == 'egli'
        p line
      end
        p 'ciao'
    end
quando rilancio il simbolo :done esco.
la differenza è che con il break interrompo il ciclo ed esco, qui invece esco proprio dall'esecuzione del blocco , quindi è qualcosa in più che l'uscire
dal ciclo del foreach.
se passo un parametro al throw viene ritornato quel valore
value = catch(:done) do
      File.foreach('words.txt') do |line|
        throw :done, 'done-executed' if line.chomp! == 'egli'
        p line
      end
      p 'ciao'
    end
    p value
  end

il throw può anche non apparire nel contesto statico del catch