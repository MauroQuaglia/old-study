METODI
Se torna boolean (predicate method) finisce con ?
Se modificano il reciver ovvero chi riceve il messaggio (bang method) finisce con !
Se sono dei setter finiscono con =
Altrimenti non ci sono altri caratteri 'magici' da aggiungere.

------------------------------------------------------------------------------------------------------------------------

DEFAULT
Es: def my_default(a='ciao')
Posso anche assegnare un default basandomi sui parametri precedenti, per esempio: def my_params(a, b=a.length)

------------------------------------------------------------------------------------------------------------------------

SPLAT (DIRETTO)
Se voglio passare più parametri ma non so quanti, posso usare la sintassi: *a.
a viene gestito come un array, che quindi può essere vuoto [] se non passo nessun parametro, oppure puù contenere
ordinatamente i parametri passati.
Es: def my_params(*a)

Si può avere solo un parametro splat per metodo.
Non si possono mettere dei valori di default dopo un parametro splat.
Si può mettere dove si vuole nella lista dei parametri, (*a) (a, *b) (*c, d).
Se mi interessano solo i parametri agli estremi posso fare (a, *, b)

A volte si usa nell'ereditarietà per passare parametri alla super classe.
Se non uso i parametri passati ma li giro direttamente alla super classe posso anche non mettere il nome del parametro.
Es:
def do(*)
  super # gli passa tutti i parametri alla super classe.
end

SPLAT INVERSO
Se metto *a, più parametri vengono passati accorpati come array.
Se metto *[a, b] i parametri accorpati vengono passati come parametri singoli.
ES:
def do (a,b,c) ... end
---> lo posso chiamare con do(1, *[2, 3])
---> lo posso chiamare con do(*(1..3))

------------------------------------------------------------------------------------------------------------------------

PARAMETRI DI METODI
Posso anche omettere le parentesi, ma sui metodi come buona norma è sempre meglio metterle.

Se l'ultimo parametro della lista è preceduto da &, questo significa che si aspetta un blocco (che sarà un oggetto Proc)
E' utile avere l'& se voglio memorizzare il blocco.

ES:
double(a)
double(a, &p)
nel primo non posso memorizzare nessun bloco perché implicito, nel secondo lo posso memorizzare

------------------------------------------------------------------------------------------------------------------------

RETURN
Ogni metodo ritorna un valore, che è il risultato dell'ultima istruzione eseguita oppure si può mettere esplicitamente
il return (di solito si omette return).
Posso fare il return di più valori che vengono passati in un array, return "a", "b".
poi posso usare l'assegnamento parallelo a, b = [...]
Es: a, b, c = my_return

------------------------------------------------------------------------------------------------------------------------

* BLOCCHI DINAMICI
Esempio di come passare un blocco. A volte è utile per togliere la duplicazione.

puts ((1..10).collect{|n| number * n}.join(', '))

Dato che collect prende un blocco posso esplicitare il blocco e passarglielo:

calc = lambda{|n| n * number}

puts ((1..10).collect(&calc).join(', '))

------------------------------------------------------------------------------------------------------------------------

HASH COME PARAMETRO DI METODO
Quando passo una hash a un metodo posso anche non esplicitare le parentesi.
E' meglio perchè altrimenti sembra un blocco.
OSS: l'hash deve precedere, eventuali splat e blocchi.

my_hash(:title, {a: 'ciao', b: 'miao'})
my_hash(:title, a: 'ciao', b: 'miao')

Con ruby 2.0 posso definire i parametri di default di una hash direttamente in un metodo.
def search(field, genre: nil, duration: 120)
se gliene passo uno che non conosce mi lancia in atomatico un ArgumentError

se invece ho degli extra argomenti della hash da passare oltre ai due di default posso usare il doppio splat
def search(field, genre: nil, duration: 120, **rest)
I valori del rest vengono messi in un oggetto hash ovviamente.

------------------------------------------------------------------------------------------------------------------------
