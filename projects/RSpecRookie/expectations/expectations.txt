Struttura base:
expect(actual).to     matcher(expected)
expect(actual).not_to matcher(expected)

Dove "matcher" è un oggetto che risponde ai metodi:
matches?(actual)
failure_message



RSpec mette a disposizione dei matcher già fatti e permette di farne di nuovi.

IDENTITÀ
Viene usato l'operatore equal? di ruby che confronta il valore dell'object_id.
* be
* equal

EQUIVALENZA LARGA
Viene usato l'operatore == di ruby che guarda il valore ma non il tipo di base. Per esempio 17 == 17.0 è vero.
* eq

EQUIVALENZA STRETTA
Viene usato l'operatore eql? di ruby che guarda il valore e il tipo di base. Per esempio 17 == 17.0 è falso.
* eql

COMPARAZIONE
* be <
* be <=
* be >=
* be >
* be_between(m, M).inclusive
* be_between(m, M).exclusive
* match(/re/)
* be_within(delta).of(value)
* start_with(value)
* end_with(value)

CLASSE
* be_instance_of(class)

TIPO
* be_kind_of(class)

RISPOSTA
* respond_to(:method)

BOOLEANI
* be_truthy  (guarda che il valore non sia nil o false, per esempio una stringa è vera)
** be true   (be usa equal?, quindi guarda l'obgect_id, quindi si aspetta proprio true)
* be_falsey  (nil o false)
** be false  (false)

NULLITA'
* be_nil

ESISTENZA
Passa quando l'oggetto sotto test risponde truthy (non nil, non false) al metodo exist?(*args) o exists?(*args)
* exist

ERRORI
expect { ... }.to raise_error # Guarda solo se lancia un errore, genera un warning perché potrebbero esserci dei falsi positivi

