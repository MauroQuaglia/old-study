Funzionamento con Ruby
Tutta la configurazione va sotto un file di tipo spec/spec_helper.rb.
E' una convenzione quando poi devo fare i test quelle di fare -> require 'spec_helper'
RSpec aggiunge al LOAD_PATH la spec directory e la directory lib.

------------------------------------------------------------------------------------------------------------------------

--example (-e): filtra i test per nome e meno di quelli che usano la one-linear-syntax.
ES:
rspec . --example "xxx"
* tutti(.) quelli che hanno nella descrizione del test la stringa "xxx"
ES:
rspec . --example "xxx" --example "yyy"

------------------------------------------------------------------------------------------------------------------------

--format (-f):

ES:
rspec . --format documentation
* formatta tutte le scritte dei test, in modo che si possano leggere.

ES:
Posso anche specificare un file dove andare a scrivere i risultati. Il default è lo stdout.
rspec spec --format documentation --out rspec.txt
rspec spec --format html --out rspec.html

ES:
Su stdout vedo la progressbar e poi mi salva anche un file html dove posso visualizzare meglio i fallimenti.
rspec . --format progress --format html --out /home/xpuser/Desktop/rspec.html

------------------------------------------------------------------------------------------------------------------------

--tag (-t)
* Filtra i test per mezzo di un tag.

ES:
Dato il test:
it "example I'm working now, too", :mq do
end
Con:
rspec tagged_spec.rb --tag mq
Eseguo solo que singolo test.

Invece con la tilde davanti:
rspec tagged_spec.rb --tag ~mq
Eseguo tutti i test tranne quelli marcati con mq.

Oppure posso fare anche così:
it "example I'm working now", :focus => true do
end
E poi eseguirli così:
rspec tagged_spec.rb --tag focus


Oppure:
it "special example with symbol", :type => :special do
end
E poi:
rspec . --tag type:special


