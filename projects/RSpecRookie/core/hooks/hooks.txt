BEFORE AND AFTER

before(:example) o before(:each)
Viene eseguito prima di ogni test.
E' l'unico che supporta il mocking.

after(:example) o after(:each)
Viene eseguito dopo ogni test.

before(:context) o before(:all)
Viene eseguito solo una volta, prima di tutti i test del gruppo di test che ho lanciato.
Se qui c'è un errore anche tutti itest che fanno riferimento a questo :context falliscono.

after(:context) o after(:all)
Viene eseguito solo una volta, alla fine di tutti i test del gruppo di test che ho lanciato.

before(:suite)
Eseguito prima di TUTTA la suite di test, non dei singoli gruppi. E' come se fosse una configurazione globale e
proprio per questo si può definire solo tramite configurazione.
In questo caso non posso definire variabili di istanza.

after(:suite)
Eseguito alla fine della suite di test.

ORDINE:
suite
context
example
example
context
suite

Tutti questi before(:example), after(:example), ecc, si possono definire direttamente nel gruppo di test
oppure nel blocco RSpec.configure.

------------------------------------------------------------------------------------------------------------------------
AROUND

around prende un test e lo decora con delle operazioni, è un modo più pulito di fare contemporaneamente il before e l'after.
around può essere usato anche insieme ai before e agli after, bisogna però controllare di volta in volta le precedenze.

Diversamente da before, in un around non è possibile definire una variabile locale alla classe di test.
Inoltre in un around non si possono definire i mock.

around(:example) do |example|
    puts 'first'
    puts example.run
    puts 'second'
end

All'interno dell'around ho accesso ai metadati del test.
around(:example) do |exp|
    puts exp.metadata[:foo]
end
it 'does something', foo: 'this is metadata' do
end

Se anche un test fallisce, dentro l'around il prima e il dopo del test vengono eseguiti.

Si può definire anche tramite configurazione.

Tramite configurazione posso anche includere un modulo nel contesto dei test.
RSpec.configure do |c|
  c.include IncludedInConfigureBlock
end

Posso mettere dei test in pending anche così, definendoli e basta.
Può essere utile per ricordarsi di doverli poi implementare.
Questo è un pending implicito.
it 'this is pending'

Se voglio fare un pending esplicito.
it 'explicit pending' do
    pending
end

Se ci sono più around definiti, li applica tutte e due.
Se anche ci sono degli around in contesti innestati li applica tutti a partire dal più interno.

------------------------------------------------------------------------------------------------------------------------
FILTERS

Possiamo usare i metadati come filtri per before, after e around.

Ci sono due modi per usare i metadati, verboso o non verboso.

Verboso:
config.around(:example, :foo => :bar) do |example|
    ...
end

it 'example', :foo => :bar do
    ...
end


Non Verboso, dove sostanzialmente usiamo un simbolo come metadato:
config.around(:example, :foo) do |example|
    ...
end

it('example', :foo) do
      ...
end


