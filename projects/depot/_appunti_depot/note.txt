rails new depot

Fissate le versioni con i file di rvm:
.ruby-version
.ruby-gemset
* Poi entrare della directory di progetto che così crea il gemset e rifare [bundle] perché quando uso [rails new] non
prende sempre il ruby corrente. Nel mio caso aveva preso ancora quello vecchio (1.9.3).
* Chiudo e riapro l'editor e poi posso vedere che sotto External Libraries sta prendendo il ruby e il gemset giusto.

Il mio gemset [depot] si trova qui: /home/xpuser/.rvm/gems/ruby-2.1.1@depot
Se lo voglio cancellarlo basta fare: [rvm gemset delete depot]
Se lo voglio ricreare basta:
* entrare nella directory di progetto -> crea il gemset depot vuoto
* lancio bundle                       -> scarica le gemme

Quando modifico il Gemfile, poi devo lanciare bundle.
* Se ho aggiunta una gemma, la scarica nel gemset [depot]
* Se ho tolto una gemma la cancella dal gemset [depot]

-----------------------------------------------------------------------------------------------------------------------
Scaffold e Migrazione

Migrare un'entità di dominio:
I nomi vanno al singolare, così l'entità "Product" viene mappata sulla tabella "products". (Product -> products)
In /config/database.yml vedo dove stanno le tabelle con i dati.
Quindi apriamo la console rails e creiamo tutta l'infrastruttura legata al database
[rails generate scaffold Product title:string description:text image_url:string price:decimal]

Una migrazione può comportare sia un cambio di tabelle che una modifica delle stesse.
I file di migration (es: 20151028113040_create_products.rb) possono essere ritoccati a mano, prima di lanciare la migrazione.
La migrazione crea anche il database. Per lanciarla [rake db:migrate].

Se mi accorgo che ho sbagliato qualcosa posso buttare tutto [rake db:drop], sistemare il file di migrazione (20151028113040_create_products.rb)
e rifare la migrazione: [rake db:create db:migrate]

Nel file seed.rb posso mettere dei dati di default che possono essere caricati in ogni momento con il comado [rake db:seed]

I metodi con il ! nelle migrazioni:
create! -> lanciano eccezione se un record non può essere inserito su database
create  -> in caso di errore fallisce silenziosamente

Quando voglio pulire e rifare da zero
rake db:create crea il database
rake db:migrate crea le tabelle delle migrazioni
rake db:seed importa i dati

------------------------------------------------------------------------------------------------------------------------
Stile
Nel layout application posso separare i body per lo stile delle varie pagine.
<body class="<%= controller.controller_name %>">
    <%= yield %>
</body>
Nel scss poi avrò: .products {...}

Rails carica tutti i fogli di stile in una volta, (poi penso siano cachati con turbolink o dal browser) comuque
per differenziarli nelle varie pagine il trucchetto è il precedente.
------------------------------------------------------------------------------------------------------------------------
cycle serve per alternare le classi. gli posso dare anche un nome così ne posso avere diversi nella stessa pagina
<tr class='<%= cycle('list_line_odd', 'list_line_even', name: 'mq') %>'>
...
</tr>
<% reset_cycle('mq') %>
------------------------------------------------------------------------------------------------------------------------

<%= truncate(strip_tags(product.description), length: 80) %>
tronca a 80 caratteri, l'80-esimo diventa il tag :omission, cioè (...)
strip_tags elimina tutti i tag html commenti inclusi

------------------------------------------------------------------------------------------------------------------------

In una pagina di index:
Chiama la show passandogli product:
/products/5
<%= link_to('Show', product) %> ---> sarebbe il default, basta mettere product e lui capisce che deve fare show cioè (product_path(product))
basta vedere il rake routes

Da documentazione:
# => <a href="/profiles/1">Profile</a>
verboso: link_to "Profile", profile_path(@profile)
conciso: link_to "Profile", @profile


<%= link_to('Edit', edit_product_path(product)) %>
/products/5/edit

chiama il metodo delete sul controller ma prima chiede conferma.
<%= link_to('Destroy', product, method: :delete, data: {confirm: 'Are you sure?'}) %>
/products/5/
