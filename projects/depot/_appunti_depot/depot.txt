sanitize(...) permette di caricare nella web page dell'html correttamente.

Senza sanitize <p> -> &lt;p&gt;
Con   sanitaze <p> -> <p>
------------------------------------------------------------------------------------------------------------------------
Nel controller:
def index
    @products = Product.all
end

Nel test del controller:
get :index
expect(assigns(:products)).not_to be_nil

Verifica che la variabile @products del controller è stata valorizzata.
Se anche fosse @products = '' il test sarebbe verde lo stesso.

------------------------------------------------------------------------------------------------------------------------
NB:
Nel file di test quando voglio caricare una fixture lo devo fare esplicitamente!
ES:
RSpec.describe Product do
  fixtures :products
end
e nello rails_helper ci deve essere la riga
config.fixture_path = "#{::Rails.root}/spec/fixtures"

La fixture non passa dal modello, quindi si saltano tutti gli eventuali check di validazione.
------------------------------------------------------------------------------------------------------------------------

Rails carica tutti i fogli di stile in un colpo solo.

------------------------------------------------------------------------------------------------------------------------

rails new depot

Fissate le versioni con i file di rvm:
.ruby-version
.ruby-gemset
* Poi entrare della directory di progetto che così crea il gemset e rifare [bundle] perché quando uso [rails new] non
prende sempre il ruby corrente. Nel mio caso aveva preso ancora quello vecchio (1.9.3).
* Chiudo e riapro l'editor e poi posso vedere che sotto External Libraries sta prendendo il ruby e il gemset giusto.

Il mio gemset [depot] si trova qui: /home/xpuser/.rvm/gems/ruby-2.1.1@depot
Se lo voglio cancellarlo basta fare: [rvm gemset delete depot]
Se lo voglio ricreare basta:
* entrare nella directory di progetto -> crea il gemset depot vuoto
* lancio bundle                       -> scarica le gemme

Quando modifico il Gemfile, poi devo lanciare bundle.
* Se ho aggiunta una gemma, la scarica nel gemset [depot]
* Se ho tolto una gemma la cancella dal gemset [depot]

-----------------------------------------------------------------------------------------------------------------------
Scaffold e Migrazione

Migrare un'entità di dominio:
I nomi vanno al singolare, così l'entità "Product" viene mappata sulla tabella "products". (Product -> products)
In /config/database.yml vedo dove stanno le tabelle con i dati.
Quindi apriamo la console rails e creiamo tutta l'infrastruttura legata al database
[rails generate scaffold Product title:string description:text image_url:string price:decimal]

Una migrazione può comportare sia un cambio di tabelle che una modifica delle stesse.
I file di migration (es: 20151028113040_create_products.rb) possono essere ritoccati a mano, prima di lanciare la migrazione.
La migrazione crea anche il database. Per lanciarla [rake db:migrate].

Se mi accorgo che ho sbagliato qualcosa posso buttare tutto [rake db:drop], sistemare il file di migrazione (20151028113040_create_products.rb)
e rifare la migrazione: [rake db:create db:migrate]

Nel file seed.rb posso mettere dei dati di default che possono essere caricati in ogni momento con il comado [rake db:seed]

I metodi con il ! nelle migrazioni:
create! -> lanciano eccezione se un record non può essere inserito su database
create  -> in caso di errore fallisce silenziosamente

Quando voglio pulire e rifare da zero
rake db:create crea il database
rake db:migrate crea le tabelle delle migrazioni
rake db:seed importa i dati

------------------------------------------------------------------------------------------------------------------------
Stile
Nel layout application posso separare i body per lo stile delle varie pagine.
<body class="<%= controller.controller_name %>">
    <%= yield %>
</body>
Nel scss poi avrò: .products {...}

Rails carica tutti i fogli di stile in una volta, (poi penso siano cachati con turbolink o dal browser) comuque
per differenziarli nelle varie pagine il trucchetto è il precedente.
------------------------------------------------------------------------------------------------------------------------
cycle serve per alternare le classi. gli posso dare anche un nome così ne posso avere diversi nella stessa pagina
<tr class='<%= cycle('list_line_odd', 'list_line_even', name: 'mq') %>'>
...
</tr>
<% reset_cycle('mq') %>
------------------------------------------------------------------------------------------------------------------------

<%= truncate(strip_tags(product.description), length: 80) %>
tronca a 80 caratteri, l'80-esimo diventa il tag :omission, cioè (...)
strip_tags elimina tutti i tag html commenti inclusi

------------------------------------------------------------------------------------------------------------------------

In una pagina di index:
Chiama la show passandogli product:
/products/5
<%= link_to('Show', product) %> ---> sarebbe il default, basta mettere product e lui capisce che deve fare show cioè (product_path(product))
basta vedere il rake routes

Da documentazione:
# => <a href="/profiles/1">Profile</a>
verboso: link_to "Profile", profile_path(@profile)
conciso: link_to "Profile", @profile


<%= link_to('Edit', edit_product_path(product)) %>
/products/5/edit

chiama il metodo delete sul controller ma prima chiede conferma.
<%= link_to('Destroy', product, method: :delete, data: {confirm: 'Are you sure?'}) %>
/products/5/

------------------------------------------------------------------------------------------------------------------------

Creazione:
rails new NomeApplicazione

Gemme installate:
bundle show

Dettaglio gemma installata:
bundle show NomeGemma

Riepilogo: rake about
* mi da anche l'elenco dei middelware
* fa anche un check su errori di installazione.

Far partire il sito:
* rails server (rails server webrick)

Vedere il risultato:
http://localhost:3000/

DESKTOP
Aprire sempre dei cmd con:
* le richieste che arrivano al webserver
* avere un tail -f sul log

RAILS
Generazione controller:
Generare SayController con due action, hello e goodbye:
* rails generate controller Say hello goodbye

Navigazione URL:
http://localhost:3000/controller/azione
http://localhost:3000/say/hello
Quando navigo "/say/hello" rails crea una nuova istanza di SayController e chiama il metodo hello, dopodiche cerca la view
hello.html.erb

------------------------------------------------------------------------------------------------------------------------

* cache
Tutte le volte che carico una pagina, in
dev: ricarica tutti i file
test, pro: li tiene in memoria

* link_to()
Buona norma usarlo per link interni all'applicazione.
Per link esterni posso decidere se preferire <a...> (oppure uso sempre link_to per convenzione)
Il path è a disposizione della rotta anche se non lo specifico, es: say_goodbye_path (NomeController_NomeAction_path)

YAML (YAML = YAML Ain't Markup Language)
YAML è un modulo che fa parte delle librerie standard di ruby.
Per configuarere
* database
* dati di test
* traduzioni

ERB
.html.erb -> vuol dire che espande il file tramite il filtro ERB e il risultato finale è un .html
.txt.erb  -> vuol dire che espande il file tramite il filtro ERB e il risultato finale è un .txt

------------------------------------------------------------------------------------------------------------------------

Rails è MVC

M  -> Active Record è l'ORM che usa Rails.
VC -> Action Pack

ORM
* Se su db ho  la tabella "orders", nel codice avrò il modello "Order"
* tabelle -> classi, righe -> oggetti, colonne -> attributi
* metodi di classe ->  operazioni sulle tabelle, metodi di istanza -> operazioni sulla singola righa.
* supporta sofisticate validazioni sui dati

Views
* ci sono diversi tipi di templating, ma il più usato è ERB.

Controller
* collega la richiesta all'azione
* gestisce le cache, moduli di helper e sessioni.

Request
* ogni richiesta è costituita da un PATH(url) e un METHOD(get, post, ...)
* ad ogni method rails associa in automatico una action.

------------------------------------------------------------------------------------------------------------------------

* i task di rake servono per tenere sotto controllo tutti quegli script che altrimenti sarebbero parte di
configurazioni esterne.

------------------------------------------------------------------------------------------------------------------------

RUBY

Marshaling
Ruby può prendere un oggetto e convertirlo in uno strem di byte che può essere salvato. Questo processo si chiama
marshaling.
Rails usa marshaling per memorizzare i dati di sessione.

Idiomi
a || b
Se a è false o nil torna b, altrimenti torna a.
Usato di solito per i default, dove b è il default.

a ||= b (a operatore= b)
Significa a = a || b (a operatore= b). Assegna alla prima variabile (a) il valore di (a || b)
count += 1  -> count = count + 1
count ||= 0 -> count = count || 0

self.new
Torna un'istanza della classe stessa. Di solito si usa quando c'è l'ereditarietà e torna un'istanza della classe stessa.

require
require_relative -> specifico solo le directory
require -> devo specificare tutto il path, con cose del tipo ..\..

require File.expand_path('../../congif/environment', __FILE__)
Ruby cerca questi file nelle directory specificate nel LOAD_PATH

require File.expand_path('../../congif/environment/x.txt', __FILE__)
Ruby cerca questo file nelle directory specificate nel LOAD_PATH, in questo caso però cerco solo un file specifico.


------------------------------------------------------------------------------------------------------------------------

Filosofia Rails
DRY - don't repeat yourself
* In Rails la configurazione per cambiare un comportamento sta sempre in un unico punto. Non devo mai toccare in più
di un punto per ottenere l'effetto desiderato.

Convention Over Configuration
* E' un paradigma di programmazione che prevede configurazione minima (o addirittura assente).

L'agilità è parte dell'idea di Rails. In ogni caso (presi dal manifesto agile)
* Individui e iterazione sociale sopra a processi e strumenti.
* lavorare sul software piuttosto che su una documentazione.
* lavorare insieme al cliente piuttosto che contrattare.
* rispondere al cambiamento piuttosto che seguire il piano.

------------------------------------------------------------------------------------------------------------------------
Quando parte Rails si prende, Ruby, le gemme di Ruby e le gemme di Rails.

Le gemme sono di due tipi, quelle di Ruby e quelle di Rails.
Ruby:  /home/xpuser/.rvm/gems/ruby-2.1.1/gems/         (dipendono dalla versione di Ruby)
Rails: /home/xpuser/.rvm/gems/ruby-2.1.1@rails-4/gems/ (dipendono dal Gemfile)

------------------------------------------------------------------------------------------------------------------------
Linux
creare il proprio account

sudo userdel mauro-quaglia
sudo adduser mauro

Rails
Quando installo Rails mi viene messa anche a disposizione una command-line (rails) che permette di creare
* applicazioni Rails già preconfigurate: rails new
* generare controller: rails generate controller

WEBrick
è una libreria di Ruby che fornisce un web server come servizio.

Bundler (bundle significa impacchettare)
E' un tool che permette di gestire le gemme in maniera efficace.

INFO
Ruby on Rails è un framework:
E' come dire apro un progetto ruby vuoto, e mi faccio tutta l'architettura rails da zero.
oppure
scarico la gemma rails e con [rails new MyApp] mi crea tutta l'infrastruttura nel progetto ruby.

------------------------------------------------------------------------------------------------------------------------

http://www.railstutorial.it/book/pagine_perlopiu_statiche

<%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
Carica tutti i css sotto la cartella: /app/assets/stylesheets

media: 'all'
Potremmo definire uno stile per ogni supporto su cui la pagina verrà utilizzata: tablet, smartphone, schermi televisivi, console per i videogiochi, ecc.
all    -> il css si applica a tutti i dispositivi di visualizzazione.
print  -> il css si applica ai dispositivi di stampa.
screen -> il css si applica allo schermo del computer.

'data-turbolinks-track' => true
Se abilito turbolink come gemma (http://geekmonkey.org/2012/09/introducing-turbolinks-for-rails-4-0/)
Quando faccio un'azione sulla pagina, invece di ricaricare tutto il contenuto carica solo il title e il body.

Però posso abilitarlo sui singoli link specificandolo.
In tal caso da una pagina all'altra il contentuo del tag marcato come turbolink non viene riscaricato.

------------------------------------------------------------------------------------------------------------------------

<%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
Carica tutti i js sotto la cartella: /app/assets/javascript

------------------------------------------------------------------------------------------------------------------------
Prevenire attacchi xss

i csrf_meta_tags vengono tradotti come
<meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="OPDg++M98Ci+917GiFNDtDlg5Ry4DOUunI01U5Vhawh5uCY2BTC0BUEFVN010r8d/HCs55/XGCetUnwLtFMLWw==" />

Cross-site request forgery = csrf

------------------------------------------------------------------------------------------------------------------------

image_tag -> punta a assets/images

