Rails

Il comado [rake]:
E' come un assistente che ci permete di eseguire dei task.

rake db:migrate
* lancia la migrazione e crea il db

rake test
* lancia tutta la suite di test.

rake db:seed
* riempie il database di test coi i valori di default.
* sostanzialmente esegue tutto quanto trova in questo file.

[rake db:drop db:create db:migrate]
* distruggere e ricreare il database

rake db:rollback
* elimina lo schema, ma il database non viene distrutto.

------------------------------------------------------------------------------------------------------------------------

Vedere tutti i gemset delle varie versioni di ruby installate:
* rvm gemset list_all

Pulire i gemset:
* rvm gemset delete nome-gemset.
* per ricrearlo vado nella dir di progetto e faccio: bundle
* NB:
Quando cancello il gemset cancello anche la gemma [bundler], quindi se poi rilancio bundle usa quello di sistema del gemset globale per riscaricare le gemme.
Quindi dovrei cancellare il gemset, aggiornare la gemma bundler, e poi fare bundle. (Vedere il Gemfile.lock)
Attenzione che posso avere nel Gemfile.lock specificato una versione di bundler e comunque usarne un'altra. E' piÃ¹ un appunto
per lo sviluppatore che per il sistema!

Vedere le gemme del gemset corrente:
gem list





------------------------------------------------------------------------------------------------------------------------

Ruby

%{}
* sintassi alternativa a "", conveniente da usare quando le stringhe sono molto lunghe.

Esempio di query con like
Product.where("title like ?", "%Scrip%")   xxxScripyyy me lo trova, % sono dei segnaposto.

Esempi di query funzionanti:

* Product.where("title like ?", "%Scrip%")
* Product.where("title like ?", "%Scri%").order("title DESC")
* Product.where("title like ?", "%Scri%").order("title ASC")
* Product.order("title ASC").count
* Product.order("title DESC").limit(2)
* Product.order("title DESC").limit(1).offset(1)
* Product.select('*') ----> Product.all
* Product.select("id, title")
* Product.all.each {|p| puts p.title  }
* Product.readonly.first
* Product.average(:price)
* Product.minimum(:price)
* Product.sum(:price)
* Product.where('price > 10').minimum(:price)
* Product.group(:title).minimum(:price)






