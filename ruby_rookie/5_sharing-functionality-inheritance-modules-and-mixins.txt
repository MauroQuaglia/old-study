Duplicazione
Due modi per eliminarla: ereditarietà, mixins (preferibile).
* ereditarietà: "A è un B" (il codice si perde un po' tra padre e figlio, inoltre c'è un accoppiamento molto forte).
* mixin: "A usa B", "A ha B" (accoppiamento meno forte)

Ereditarietà di base:
MyClass < Object < BasicObject

EREDITARIETA'
La parola 'super' serve per chiamare il metodo base del metodo chiamato.
Cerca il metodo nella classe base con lo stesso nome e gli passa gli stessi parametri passati al metodo figlio senza
bisogno di specificarlo.
Anche se nella classe figlio non metto il costruttore, il costruttore base viene chiamato.
Ruby supporta solo l'ereditarietà singola.

MODULI
Un modulo non può avere istanze perché non è una classe, ma può essere incluso in una classe.
Per usare i mixin devo prima capire come funzionano i moduli.
I moduli definiscono un namespace (una sandbox) dove posso mettere del codice senza preoccuparmi troppo di altri metodi
e costanti definiti in altri moduli o classi. Anche se ci sono nomi uguali di metodi possiamo invocarli separatamente
basta definirli con il nome di modulo davanti (module method) per evitare ambiguità.
Solitamente i moduli non sono classi, non nascono con l'idea di avere una precisa responsabilità, sono piuttosto da
vedere come posti in cui mettere del codice in comune, come metodi, classi e costanti.
Posso caricare i moduli in un file con il require_relative come se fossero delle normali classi.

Es:
require_relative 'trig'
require_relative 'moral'
def MyClass
 include Trig, Moral
 ...
end
* Cerca cos in MyClass, non c'è, lo cerca in Moral e lo trova, poi controlla cosa c'è in Trig e lo trova anche qui,
quindi usa questo perché è l'ultimo che ha trovato.
Ruby cerca così: classe, moduli(a partire dall'ultimo incluso a salire), poi nella superclasse della classe
e nei suoi moduli, e così via...

Es:
require_relative 'trig'
require_relative 'morla'
def MyClass
    ...
end
* In questo caso non ho fatto include nella classe dei moduli. Tuttavia ho caricato il file del modulo grazie al
require_relative. Se volgio usare i metodi all'inteno della classe devo specificare per forza il nome del modulo:
Trig.sin('XXX'), Moral.sin('YYY'). Però devo aver definito i metodi come module method, cioè metodi che iniziano con
il nome del modulo: def Trig.sin(x)...end.

Conflitti sulle variabili dei moduli
Il modulo che includo nella classe può avere delle variabili di istanza.
Tuttavia potrebbero sorgere dei problemi, in quanto questa variabile di istanza potrebbe andare in conflitto con
varibili di istanza già definite nella classe o in altri moduli inclusi.
Un modo semplice per risolvere il problema è chiamare le variabili di istanza con un nome che inizia per il nome
del modulo in cui sono state definite.
Comunque un modulo che deve tenersi il proprio stato ha già dignità di classe e non dovrebbe essere implementato come
modulo.

------------------------------------------------------------------------------------------------------------------------

MIXINS
Posso rendere disponibili i metodi e le costanti di un modulo in una classe usando la parola 'include'.
La classe più il modulo/i viene detta mixin.
All'interno del modulo posso avere anche il riferimento alla classe che lo sta usando con {self.class.name}
Prima di usare l'include devo usare il require_relative per caricare il modulo.
Se più classi includono lo stesso modulo esse stanno puntando alla stessa cosa. E' come se fosse uno statico.
Non viene caricato nella classe ma c'è un puntatore della classe al modulo.

Quando il codice del modulo comincia a interagire con quello della classe inizia il vero potere!
in tal caso infatti non sto usando il modulo solo come un contenitore di metodi atomici ma i metodi del modulo
interagiscono con quelli della classe. (Es: modulo comparable e metodo <=> nella classe.)
* il modulo Comparable presuppone che nella classe sia definto il metodo <=>
* fatto questo ho sette funzioni di comparazione gratis! <, <=, ==, >=, >, <=> e between?
* Oss: dato che per esempio su un array è definito il metodo sort che usa queste, posso fare sort su un array di queste
classi che includono Comparable.

------------------------------------------------------------------------------------------------------------------------

Le collezioni di Ruby come Array, Hash, ... supportano molte operazioni: ordinamento, scorrimento, ecc...
Il bello è che anche ogni nostra classe possiamo dotarla di tutto ciò!
* dobbiamo scrivere un iterator di nome each che ritorna gli elementi che vogliamo
* dotare la nostra classe del modulo Enumerable (abbiamo quindi creato un mixin)
** se implemento anche <=> avrò anche min, max, sort,...

Se si vuole sfruttare nella sua completezza il modulo Enumerable implementiamo
* each
* <=>
così abbiamo a disposizione tutti i metodi di Enumerable funzionanti.

Esempio
* l'inject posso usarlo in tutte le classi che includono il modulo Enumerable e che definiscono il metodo each.
* inject applica ai primi due elemnti una certa operazione, il risultato lo applica al terzo elemento e cosi via
* avrò una cosa del tipo VowelFinder.new('ciao ciao lulu').inject(:+) per concatenare tutte le vocali.
